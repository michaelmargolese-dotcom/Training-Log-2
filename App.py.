import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# --- Initialize session state ---
if "workouts" not in st.session_state:
    st.session_state["workouts"] = pd.DataFrame(columns=["Date", "Exercise", "Sets", "Reps", "Weight (kg)", "Run Distance (km)", "Run Time (min)"])

if "nutrition" not in st.session_state:
    st.session_state["nutrition"] = pd.DataFrame(columns=["Date", "Calories", "Protein (g)", "Carbs (g)", "Fat (g)", "Hydration (L)"])

if "metrics" not in st.session_state:
    st.session_state["metrics"] = pd.DataFrame(columns=["Date", "Weight (kg)", "Body Fat (%)", "Waist (cm)"])

# --- Sidebar Navigation ---
st.sidebar.title("Training & Nutrition Log")
page = st.sidebar.radio("Go to", ["Workout Log", "Nutrition Log", "Body Metrics", "Dashboard", "Export Data"])

# --- Workout Log ---
if page == "Workout Log":
    st.title("üèãÔ∏è Workout Log")

    with st.form("workout_form"):
        date = st.date_input("Date")
        exercise = st.text_input("Exercise Name")
        sets = st.number_input("Sets", min_value=1, value=3)
        reps = st.number_input("Reps", min_value=1, value=8)
        weight = st.number_input("Weight (kg)", min_value=0.0, value=0.0)
        run_distance = st.number_input("Run Distance (km)", min_value=0.0, value=0.0)
        run_time = st.number_input("Run Time (min)", min_value=0.0, value=0.0)
        submitted = st.form_submit_button("Add Workout")

    if submitted:
        new_row = pd.DataFrame([[date, exercise, sets, reps, weight, run_distance, run_time]],
                               columns=st.session_state["workouts"].columns)
        st.session_state["workouts"] = pd.concat([st.session_state["workouts"], new_row], ignore_index=True)

    st.subheader("Workout History")
    st.dataframe(st.session_state["workouts"])

# --- Nutrition Log ---
elif page == "Nutrition Log":
    st.title("ü•ó Nutrition Log")

    with st.form("nutrition_form"):
        date = st.date_input("Date")
        calories = st.number_input("Calories", min_value=0, value=2000)
        protein = st.number_input("Protein (g)", min_value=0, value=150)
        carbs = st.number_input("Carbs (g)", min_value=0, value=200)
        fat = st.number_input("Fat (g)", min_value=0, value=60)
        hydration = st.number_input("Hydration (L)", min_value=0.0, value=2.0)
        submitted = st.form_submit_button("Add Nutrition")

    if submitted:
        new_row = pd.DataFrame([[date, calories, protein, carbs, fat, hydration]],
                               columns=st.session_state["nutrition"].columns)
        st.session_state["nutrition"] = pd.concat([st.session_state["nutrition"], new_row], ignore_index=True)

    st.subheader("Nutrition History")
    st.dataframe(st.session_state["nutrition"])

# --- Body Metrics ---
elif page == "Body Metrics":
    st.title("üìä Body Metrics")

    with st.form("metrics_form"):
        date = st.date_input("Date")
        weight = st.number_input("Weight (kg)", min_value=0.0, value=66.9)
        bodyfat = st.number_input("Body Fat (%)", min_value=0.0, value=15.0)
        waist = st.number_input("Waist (cm)", min_value=0.0, value=80.0)
        submitted = st.form_submit_button("Add Metrics")

    if submitted:
        new_row = pd.DataFrame([[date, weight, bodyfat, waist]],
                               columns=st.session_state["metrics"].columns)
        st.session_state["metrics"] = pd.concat([st.session_state["metrics"], new_row], ignore_index=True)

    st.subheader("Metrics History")
    st.dataframe(st.session_state["metrics"])

# --- Dashboard ---
elif page == "Dashboard":
    st.title("üìà Dashboard")

    if not st.session_state["metrics"].empty:
        st.subheader("Weight Over Time")
        st.line_chart(st.session_state["metrics"][["Date", "Weight (kg)"]].set_index("Date"))

        st.subheader("Body Fat % Over Time")
        st.line_chart(st.session_state["metrics"][["Date", "Body Fat (%)"]].set_index("Date"))

    if not st.session_state["nutrition"].empty:
        st.subheader("Calories Over Time")
        st.line_chart(st.session_state["nutrition"][["Date", "Calories"]].set_index("Date"))

# --- Export Data ---
elif page == "Export Data":
    st.title("üíæ Export Data")

    st.write("Download your logs as CSV files:")
    st.download_button("Download Workouts", st.session_state["workouts"].to_csv(index=False), "workouts.csv")
    st.download_button("Download Nutrition", st.session_state["nutrition"].to_csv(index=False), "nutrition.csv")
    st.download_button("Download Metrics", st.session_state["metrics"].to_csv(index=False), "metrics.csv")
